From 2d1a0979a04ae9e59e6255fba87fdf14c666a1fa Mon Sep 17 00:00:00 2001
From: Jonathan Oakley <h4yn0nnym0u5e@users.noreply.github.com>
Date: Sat, 11 Jun 2022 11:05:38 +0100
Subject: [PATCH 1/2] =?UTF-8?q?Added=20setWire()=20to=20allow=20use=20of?=
 =?UTF-8?q?=20other=20I=C2=B2C=20busses?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Also updated documentation
---
 control_sgtl5000.cpp | 58 ++++++++++++++++++++++++++++++++------------
 control_sgtl5000.h   |  7 +++++-
 gui/index.html       | 34 ++++++++++++++++++++++++--
 3 files changed, 80 insertions(+), 19 deletions(-)

diff --git a/control_sgtl5000.cpp b/control_sgtl5000.cpp
index d9f614e0..c2f9dbca 100644
--- a/control_sgtl5000.cpp
+++ b/control_sgtl5000.cpp
@@ -26,7 +26,6 @@
 
 #include <Arduino.h>
 #include "control_sgtl5000.h"
-#include "Wire.h"
 
 #define CHIP_ID				0x0000
 // 15:8 PARTID		0xA0 - 8 bit identifier for SGTL5000
@@ -499,6 +498,18 @@
 #define SGTL5000_I2C_ADDR_CS_LOW	0x0A  // CTRL_ADR0_CS pin low (normal configuration)
 #define SGTL5000_I2C_ADDR_CS_HIGH	0x2A // CTRL_ADR0_CS  pin high
 
+TwoWire* AudioControlSGTL5000::wires[] = {&Wire
+#if defined(WIRE_IMPLEMENT_WIRE1)
+,&Wire1
+#if defined(WIRE_IMPLEMENT_WIRE2)
+,&Wire2
+#if defined(ARDUINO_TEENSY_MICROMOD)
+,Wire3
+#endif//  defined(ARDUINO_TEENSY_MICROMOD)
+#endif // defined(WIRE_IMPLEMENT_WIRE2)
+#endif // defined(WIRE_IMPLEMENT_WIRE1)
+};
+#define MAX_WIRE (sizeof wires / sizeof wires[0] - 1)
 
 void AudioControlSGTL5000::setAddress(uint8_t level)
 {
@@ -509,6 +520,21 @@ void AudioControlSGTL5000::setAddress(uint8_t level)
 	}
 }
 
+void AudioControlSGTL5000::setWire(uint8_t wnum, uint8_t level)
+{
+	setAddress(level);
+	if (wnum > MAX_WIRE) wnum = MAX_WIRE;
+	wire = wires[wnum];
+}
+#undef MAX_WIRE
+
+void AudioControlSGTL5000::setWire(TwoWire& wref, uint8_t level)
+{
+	setAddress(level);
+	wire = &wref;
+}
+
+
 bool AudioControlSGTL5000::enable(void) {
 #if defined(KINETISL)
 	return enable(16000000); // SGTL as Master with 16MHz MCLK from Teensy LC
@@ -517,10 +543,10 @@ bool AudioControlSGTL5000::enable(void) {
 #endif	
 }
 
+
 bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
 {
-
-	Wire.begin();
+	wire->begin();
 	delay(5);
 	
 	//Check if we are in Master Mode and if the Teensy had a reset:
@@ -595,25 +621,25 @@ bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq
 unsigned int AudioControlSGTL5000::read(unsigned int reg)
 {
 	unsigned int val;
-	Wire.beginTransmission(i2c_addr);
-	Wire.write(reg >> 8);
-	Wire.write(reg);
-	if (Wire.endTransmission(false) != 0) return 0;
-	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
-	val = Wire.read() << 8;
-	val |= Wire.read();
+	wire->beginTransmission(i2c_addr);
+	wire->write(reg >> 8);
+	wire->write(reg);
+	if (wire->endTransmission(false) != 0) return 0;
+	if (wire->requestFrom((int)i2c_addr, 2) < 2) return 0;
+	val = wire->read() << 8;
+	val |= wire->read();
 	return val;
 }
 
 bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
 {
 	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
-	Wire.beginTransmission(i2c_addr);
-	Wire.write(reg >> 8);
-	Wire.write(reg);
-	Wire.write(val >> 8);
-	Wire.write(val);
-	if (Wire.endTransmission() == 0) return true;
+	wire->beginTransmission(i2c_addr);
+	wire->write(reg >> 8);
+	wire->write(reg);
+	wire->write(val >> 8);
+	wire->write(val);
+	if (wire->endTransmission() == 0) return true;
 	return false;
 }
 
diff --git a/control_sgtl5000.h b/control_sgtl5000.h
index 153cf866..76281664 100644
--- a/control_sgtl5000.h
+++ b/control_sgtl5000.h
@@ -29,6 +29,7 @@
 
 #include <AudioStream.h>
 #include "AudioControl.h"
+#include "Wire.h"
 
 // SGTL5000-specific defines for headphones
 #define AUDIO_HEADPHONE_DAC 0
@@ -37,8 +38,10 @@
 class AudioControlSGTL5000 : public AudioControl
 {
 public:
-	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
+	AudioControlSGTL5000(void) : i2c_addr(0x0A), wire{wires[0]} { }
 	void setAddress(uint8_t level);
+	void setWire(uint8_t wnum = 0, uint8_t level = LOW);
+	void setWire(TwoWire& wref = Wire, uint8_t level = LOW);
 	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
 	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
 	bool disable(void) { return false; }
@@ -120,6 +123,8 @@ class AudioControlSGTL5000 : public AudioControl
 	bool semi_automated;
 	void automate(uint8_t dap, uint8_t eq);
 	void automate(uint8_t dap, uint8_t eq, uint8_t filterCount);
+	static TwoWire* wires[3];
+	TwoWire* wire;
 };
 
 //For Filter Type: 0 = LPF, 1 = HPF, 2 = BPF, 3 = NOTCH, 4 = PeakingEQ, 5 = LowShelf, 6 = HighShelf
diff --git a/gui/index.html b/gui/index.html
index d9a0e48d..21ba0e94 100644
--- a/gui/index.html
+++ b/gui/index.html
@@ -5170,7 +5170,8 @@ <h3>Audio Connections</h3>
 	<h3>Functions</h3>
 	<p>These are the most commonly used SGTL5000 functions.</p>
 	<p class=func><span class=keyword>enable</span>();</p>
-	<p class=desc>Start the SGTL5000.  This function should be called first.
+	<p class=desc>Start the SGTL5000.  This function should be called before any
+	other function, unless setWire() or setAddress() are needed.
 	</p>
 	<p class=func><span class=keyword>volume</span>(level);</p>
 	<p class=desc>Set the headphone volume level.  Range is 0 to 1.0, but
@@ -5185,7 +5186,36 @@ <h3>Functions</h3>
 	<p class=desc>When using the microphone input, set the amplifier gain.
 		The input number is in decibels, from 0 to 63.
 	</p>
-
+	
+	<h3>I²C bus configuration</h3>
+	<p>These functions will be of use if you have modified hardware which changes the 
+	I²C address of your audio shield, or have wired it to use a different bus from the 
+	standard Wire one.
+	</p>
+	<p class=func><span class=keyword>setWire</span>(wire,address);</p>
+	<p class=desc>Select the I²C bus and address controlling the SGTL5000.  
+	This function must be called before enable(), if it is used. Default
+	is Wire, LOW address.
+	<br><br>
+	The wire parameter may be a reference to a TwoWire object (Wire, Wire1 etc.) or an integer between
+	0 and 3, which will select from Wire, Wire1, Wire2 and Wire3. If a non-existent selection
+	is attempted then the highest available value will be used.
+	<br><br>
+	The address parameter selects which of the two possible I²C addresses for the 
+	SGTL5000 is in use: 0 will select the "low" address (0x0A), and 1 will select
+	the "high" address (0x2A). 
+	</p>
+	
+	<p class=func><span class=keyword>setAddress</span>(address);</p>
+	<p class=desc>Select the I²C address controlling the SGTL5000.  
+	This function must be called before enable(), if it is used. The library default
+	is LOW address, so if your audio shield is unmodified you won't need this function.
+	<br><br>
+	The address parameter selects which of the two possible I²C addresses for the 
+	SGTL5000 is in use: 0 will select the "low" address (0x0A), and 1 will select
+	the "high" address (0x2A).
+	</p>
+	
 	<h3>Signal Levels</h3>
 
 	<p>The default signal levels should be used for most applications,

From 3c091eb923767de14549aad39c34b1a624933335 Mon Sep 17 00:00:00 2001
From: Jonathan Oakley <h4yn0nnym0u5e@users.noreply.github.com>
Date: Sat, 11 Jun 2022 11:55:10 +0100
Subject: [PATCH 2/2] Add setWire to keywords.txt

---
 keywords.txt | 1 +
 1 file changed, 1 insertion(+)

diff --git a/keywords.txt b/keywords.txt
index 5193eb41..dd787cb8 100644
--- a/keywords.txt
+++ b/keywords.txt
@@ -137,6 +137,7 @@ trigger	KEYWORD2
 length	KEYWORD2
 threshold	KEYWORD2
 setAddress	KEYWORD2
+setWire	KEYWORD2
 enable	KEYWORD2
 enableIn	KEYWORD2
 enableOut	KEYWORD2
